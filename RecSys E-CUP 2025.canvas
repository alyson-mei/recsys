{
	"nodes":[
		{"id":"a620bbd0be337e2d","x":-520,"y":-420,"width":800,"height":1440,"type":"text","text":"### Постановка задачи и базовая специфика\n\n**1. Постановка**\n- **Топ-K персональных рекомендаций** для каждого пользователя в категории _apparel_.\n- Задача не «угадать 1 товар», а **составить упорядоченный список**, где важен порядок позиций.\n- На проверке будет **автоматическая метрика качества ранжирования** (скорее всего, что-то вроде NDCG@K, MAP@K, MRR@K).\n\n**2. Источники сигналов**\n- **История взаимодействий** (просмотры, покупки) — основной ресурс.\n- **Атрибуты товара** (категория, бренд, материал, сезон, цена).\n- **Поведенческие признаки** (частота, давность покупок, тренды по пользователю).\n- **Контент** (тексты: названия, описания; изображения — если есть).\n- ==**Холодный старт**== — нужно будет строить рекомендации для новых товаров/пользователей, значит, контентные признаки должны быть в пайплайне\n\n**3. ==Специфика apparel==**\n\n- **Сезонность**: зима → куртки, шапки, шарфы; лето → шорты, сандалии.\n- **Совместимость**: ботинки → носки; платье → сумка.\n- Можно явно моделировать «часто берут вместе» + «схожие стили».\n    \n**4. Масштабируемость**\n\n- Каталог большой → нужно быстро искать похожие товары (Faiss, Annoy, HNSWlib, Milvus).\n- Алгоритм должен выдерживать **инференс на всех пользователях** за разумное время.\n- Протестируй пайплайн на подвыборке, но держи в голове, что финальный прогон будет x100 по объёму.\n\n**5. Разделить решение на два этапа**\n- **Candidate generation** (сузить каталог до 100–300 кандидатов для пользователя).    \n- **Ranking** (отранжировать кандидатов по вероятности покупки).\n- Это позволит держать баланс между качеством и скоростью\n\n**6. Требования к сабмиту**\n- CSV: `user_id, recommendations` — рекомендации в **одной строке через разделитель** (формат уточнят).\n- **Никаких пропусков**, дубликатов или чужих категорий.\n- Итоговый файл должен быть воспроизводим **одной командой**.\n\n**7. Минимизируем ручную магию**\n- Весь код — от загрузки данных до генерации сабмита — в одном воспроизводимом пайплайне.\n- Всё, что можно — параметризуй (пути, K, фильтры).\n- Обязательно: `requirements.txt` или `environment.yml`.\n\n**8. Тесты и валидация**\n- Локально заведи **валидационный сплит** (например, последние N дней как hold-out).\n- Проверяй метрику на валидации **в том же формате, что будет на лидерборде**.\n- Прогоняй финальный пайплайн на подвыборке перед каждым изменением."},
		{"id":"0df8d6391328214b","x":320,"y":-420,"width":680,"height":540,"type":"text","text":"### Блок 1\n\n#### 1) Цель этого шага (коротко)\nСобрать **рабочую** систему, которая:\n- генерирует кандидатов для каждого пользователя (candidate set),\n- ранжирует их в топ-K (простая, воспроизводимая формула),\n- даёт базовый офлайн-скор (Recall/ NDCG) и легко масштабируется."},
		{"id":"7d1bf332e33c1fa8","x":-520,"y":-1280,"width":620,"height":340,"type":"text","text":"**Источники сигналов:**\n\n> **История взаимодействий** — последовательность действий пользователя с товарами (просмотры, корзина, покупки). В нашем треке ключевой сигнал — покупки.\n\n> **Атрибуты товара** — табличные, текстовые и визуальные признаки: категория, бренд, цена, материал, описание, эмбеддинги изображений и т.д."},
		{"id":"e71c48767008a6d2","x":160,"y":-1520,"width":700,"height":440,"type":"text","text":"**Два подхода **\n\n> **Коллаборативная фильтрация** — семейство методов, использующих паттерны совместных взаимодействий пользователей и товаров, без явных признаков самих товаров.\n\n**Идея:** «похожие пользователи выбирают похожие товары». Нужна матрица взаимодействий и механика поиска сходства.\n\n> **Контентные рекомендации** — методы, сопоставляющие товары по их признакам (атрибутам, текстам, изображениям) и предлагающие похожие на уже понравившиеся.\n\n**Идея:** «товары похожи по своим признакам, значит один может быть заменой/дополнением другому» — работает даже без истории у конкретного пользователя."},
		{"id":"794f9c4296dd9e7d","x":160,"y":-1000,"width":700,"height":540,"type":"text","text":"### Коллаборативная фильтрация (basic -> advanced)\n\n1\\. Матрица \"пользователь-товар\" с неявными откликами (0/1) \n| Sparse, Implicit feedback\n\n2\\. **User-based и Item-based CF**\n- User-based - ищем соседей пользователя и рекомендуем их покупки\n- Item-based - ищем соседей товара и предлагаем их текущему пользователю\n| Косинусная близость,"}
	],
	"edges":[
		{"id":"7b2980f814a6ecdd","fromNode":"e71c48767008a6d2","fromSide":"bottom","toNode":"794f9c4296dd9e7d","toSide":"top"}
	]
}